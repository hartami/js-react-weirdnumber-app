{"version":3,"sources":["components/BestBeers.js","App.js","serviceWorker.js","index.js"],"names":["BestBeers","myBestBeers","_loop","num","divisorsList","Object","toConsumableArray","Array","keys","slice","reduce","s","a","divisor","push","divisors","findSubsets","n","list","length","console","log","react_default","createElement","App","state","clicked","handleClick","_this","setState","className","onClick","this","components_BestBeers","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOA6DeA,MA3Df,WAGE,IAFA,IAAIC,EAAc,GADCC,EAAA,SAGVC,GACP,IAAIC,EAAe,IAGJ,SAAAD,GAAG,OAChBE,OAAAC,EAAA,EAAAD,CAAIE,MAAMJ,GAAKK,QAAQC,MAAM,GAAGC,OAAO,SAACC,EAAGC,GACzC,IAAIC,IAAYV,EAAMS,IAAMA,EAE5B,OADIC,GAAST,EAAaU,KAAKD,GACxBF,EAAIE,GACV,IAEsBE,CAASZ,IAGRA,KAEkC,IAelE,SAASa,EAAYC,EAAGC,EAAMC,GAM5B,OAAU,IAANF,IAIW,IAAXE,GAAsB,IAANF,KAKhBC,EAAKC,EAAS,GAAKF,EACdD,EAAYC,EAAGC,EAAMC,EAAS,GAIrCH,EAAYC,EAAGC,EAAMC,EAAS,IAC9BH,EAAYC,EAAIC,EAAKC,EAAS,GAAID,EAAMC,EAAS,IApC3CH,CAAYb,EAAKC,EAAcA,EAAae,SAC9CC,QAAQC,IAAI,cAAelB,EAAK,4BAChCF,EAAYa,KAAKX,EAAK,MAEtBiB,QAAQC,IAAI,cAAelB,EAAK,oBApB7BA,EAAM,EAAGA,GAAO,IAAMA,IAAOD,EAA7BC,GAwBT,OACEmB,EAAAV,EAAAW,cAAA,WACED,EAAAV,EAAAW,cAAA,SAAItB,KCDKuB,6MAzBbC,MAAQ,CAAEC,SAAS,KAEnBC,YAAc,WACZC,EAAKC,SAAS,CACZH,SAAUE,EAAKH,MAAMC,mFAKvB,OACEJ,EAAAV,EAAAW,cAAA,OAAKO,UAAU,OACbR,EAAAV,EAAAW,cAAA,UAAQO,UAAU,cAChBR,EAAAV,EAAAW,cAAA,4CACAD,EAAAV,EAAAW,cAAA,uDACAD,EAAAV,EAAAW,cAAA,UAAQQ,QAASC,KAAKL,YAAaG,UAAU,UAC1C,IADH,QAICE,KAAKP,MAAMC,SAAWJ,EAAAV,EAAAW,cAACU,EAAD,eAnBfC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAV,EAAAW,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd6177a7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction BestBeers() {\r\n  let myBestBeers = []; // numbers which fulfill two conditions\r\n\r\n  for (let num = 1; num <= 1000; num++) {\r\n    let divisorsList = [];\r\n\r\n    // to get all proper divisors and a list of divisors\r\n    let divisors = num =>\r\n      [...Array(num).keys()].slice(1).reduce((s, a) => {\r\n        let divisor = !(num % a) && a;\r\n        if (divisor) divisorsList.push(divisor);\r\n        return s + divisor;\r\n      }, 0);\r\n\r\n    let sumAllProperDivisors = divisors(num); // sum of all proper divisors of each number\r\n\r\n    // to check the first condition\r\n    if (sumAllProperDivisors >= num) {\r\n      // if the first condition is fulfilled, then check the subsets\r\n      if (findSubsets(num, divisorsList, divisorsList.length) === false) {\r\n        console.log(\"The number \", num, \"matches both conditions.\");\r\n        myBestBeers.push(num, \" \");\r\n      } else {\r\n        console.log(\"The number \", num, \"is eliminated.\");\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <p>{myBestBeers}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction findSubsets(n, list, length) {\r\n  /* This is a recursive function to check the second condition. Check if there is a subset which has a sum value is equal to a certain value(n). It returns true if a subset is found.\r\n  n = 0 is the remaining sum value that should be reached.\r\n  console.log(\"n is\", n);\r\n  console.log(\"length is \", length); */\r\n\r\n  if (n === 0) {\r\n    // There is no remaining sum value that should be reached, so the is a subset which violates the second condition.\r\n    return true;\r\n  }\r\n  if (length === 0 && n !== 0) {\r\n    //The list is already empty {}, but there is still remaining sum value that should be reached.\r\n    return false;\r\n  }\r\n  //If the last element is greater than n, then ignore it\r\n  if (list[length - 1] > n) {\r\n    return findSubsets(n, list, length - 1);\r\n  }\r\n  //check if n can be obtained by including or excluding the last element\r\n  return (\r\n    findSubsets(n, list, length - 1) ||\r\n    findSubsets(n - list[length - 1], list, length - 1)\r\n  );\r\n}\r\n\r\nexport default BestBeers;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport BestBeers from \"./components/BestBeers\";\n\nclass App extends Component {\n  state = { clicked: false };\n\n  handleClick = () => {\n    this.setState({\n      clicked: !this.state.clicked\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Welcome to My Brainteaser App!</h1>\n          <p>Here are the tap numbers of the best beer:</p>\n          <button onClick={this.handleClick} className=\"button\">\n            {\" \"}\n            SHOW\n          </button>\n          {this.state.clicked && <BestBeers />}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}